const [
	defaultJSConfig,
	defaultModuleConfig,
] = require('@wordpress/scripts/config/webpack.config')
const {
	requestToExternal,
	requestToHandle,
	requestToExternalModule,
	getFile,
	getRootFile,
	getWebPackAlias,
} = require('./tools/webpack-helpers')
const WoocommerceDependencyExtractionWebpackPlugin = require('@woocommerce/dependency-extraction-webpack-plugin')
const DependencyExtractionWebpackPlugin = require('@wordpress/dependency-extraction-webpack-plugin')
const RemoveEmptyScriptsPlugin = require('webpack-remove-empty-scripts')
const { getAsBooleanFromENV } = require('@wordpress/scripts/utils')

const hasNoExternalsFlag = getAsBooleanFromENV(
	'WP_NO_EXTERNALS',
)

/*module.exports = {
	...defaultModuleConfig,
	entry: getFile('viewModule.js'),
	output: {
		/!*path: path.resolve(__dirname, 'build'),
		filename: 'bundle.js',*!/
		import: '@wordpress/interactivity/build-module/index.js',
		library: {
			//name: 'MyInteractiveApp',
			type: 'module',
		},
	},
	// Remove externals to bundle everything
};*/

const scriptConfig = {
	...defaultJSConfig,

	entry: {},

	resolve: {
		...defaultJSConfig.resolve,
		alias: {
			...defaultJSConfig.resolve.alias,
			...getWebPackAlias(),
		},
	},

	plugins: [
		// ...defaultJSConfig.plugins,
		...defaultJSConfig.plugins.filter(
			(plugin) =>
				plugin.constructor.name !== 'DependencyExtractionWebpackPlugin',
		),
		!hasNoExternalsFlag && new WoocommerceDependencyExtractionWebpackPlugin({
			requestToExternal,
			requestToHandle,
			requestToExternalModule,
		}),

		// Removes the empty `.js` files generated by webpack but
		// sets it after WP has generated its `*.asset.php` file.
		new RemoveEmptyScriptsPlugin({
			stage: RemoveEmptyScriptsPlugin.STAGE_AFTER_PROCESS_PLUGINS,
		}),
	],
}

const moduleConfig = {
	...defaultModuleConfig,

	entry: {
		// ...defaultModuleConfig.entry(),
		'view-module': getFile('index.js'),
		/*'interactivity': {
			import: getFile('in.js'),
			library: {
				//name: ['wp', 'interactivity'],
				type: 'module',
			},
		},*/
	},

	resolve: {
		...defaultModuleConfig.resolve,
		alias: {
			...defaultModuleConfig.resolve.alias,
			...getWebPackAlias(),
		},
	},

	plugins: [
		// ...defaultModuleConfig.plugins,
		...defaultModuleConfig.plugins.filter(
			(plugin) =>
				plugin.constructor.name !== 'DependencyExtractionWebpackPlugin',
		),
		!hasNoExternalsFlag && new WoocommerceDependencyExtractionWebpackPlugin({
			requestToExternal,
			requestToHandle,
			requestToExternalModule,
		}),

		// Removes the empty `.js` files generated by webpack but
		// sets it after WP has generated its `*.asset.php` file.
		new RemoveEmptyScriptsPlugin({
			stage: RemoveEmptyScriptsPlugin.STAGE_AFTER_PROCESS_PLUGINS,
		}),
	],
}

module.exports = [scriptConfig, moduleConfig]
